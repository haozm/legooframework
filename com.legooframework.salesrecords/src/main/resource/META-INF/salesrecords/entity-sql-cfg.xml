<?xml version="1.0" encoding="UTF-8"?>
<sqls>
    <macros>
        <macro id="crm_salerecord_fields">
            <![CDATA[
             <#macro salerecord_fields>
                     acs.id AS 'id',
                     acs.oldSaleRecordId AS 'oldSaleRecordId',
                     acs.saleOrderNo AS 'saleOrderNo',
                     acs.status AS 'status',
                     acs.company_id AS 'companyId',
                     acs.store_id AS 'storeId',
                     acs.member_id AS 'memberId',
                     acs.change_flag AS 'changeFlag',
                     acs.createUser_id AS 'creator',
                     acs.saleTotalAmount AS 'saleTotalAmount',
                     acs.saleCount AS 'goodsCount',
                     (  SELECT mm.guide_id
                          FROM crm_member mm
                         WHERE acs.member_id = mm.id ) AS 'shoppingguideId',
                 <#if hasDetail>1<#else>0</#if> AS 'sample',
                 <#if hasDetail>
                    ( SELECT GROUP_CONCAT( CONCAT_WS('$', acsr.id ,
                                            IFNULL(acsr.salePrice,0.0) ,
                                            IFNULL(acsr.goodsPrice,0.0) ,
                                            IFNULL(acsr.goodsCount,0) ,
                                            IFNULL(acsr.status,1),
                                            acg.id ,
                                            IFNULL(acg.status, 1),
                                            IFNULL(acg.`function`, '-'),
                                            IFNULL(acg.name,'-') ,
                                            acg.company_id ) SEPARATOR '@' )
                        FROM crm_salesubrecord AS acsr
                   LEFT JOIN crm_goods acg ON acg.id = acsr.goods_id
                       WHERE acsr.saleRecord_id = acs.id
                         AND acsr.status = 1
                    GROUP BY acsr.oldSaleRecordId ) AS 'details',
                 </#if>
                    acs.createTime AS 'createTime',
                    acs.updateTime AS 'editTime',
                    acs.updateTime AS 'modifyDate',
                    acs.company_id AS 'tenantId',
                    0 AS 'editor'
	         </#macro>
           ]]>
        </macro>
    </macros>
    <model id="SaleRecordEntity">
        <sql id="loadByDateInterval" macros="crm_salerecord_fields">
            <body><![CDATA[
             SELECT <@salerecord_fields />
               FROM crm_salerecord AS acs
              WHERE LENGTH(acs.member_id) > 0
                AND LENGTH(acs.store_id) > 0
                AND LENGTH(acs.company_id) > 0
                AND acs.createTime IS NOT NULL
             <#if categories??>
                AND acs.categories = :categories
             </#if>
                AND acs.status = 1
                AND acs.company_id = :companyId
                AND acs.store_id = :storeId
                AND acs.createTime BETWEEN :startDay AND :endDay
           ORDER BY acs.store_id, acs.member_id, acs.createTime
            ]]></body>
        </sql>
        <sql id="loadMemberBy90Days" dynamic="true" macros="crm_salerecord_fields">
            <body><![CDATA[
          SELECT <@salerecord_fields />
            FROM crm_salerecord acs
           WHERE LENGTH(acs.member_id) > 0
             AND LENGTH(acs.store_id) > 0
             AND LENGTH(acs.company_id) > 0
             AND acs.status = 1
             AND acs.company_id = :companyId
             AND acs.member_id = :memberId
             AND acs.store_id = :storeId
             AND acs.createTime BETWEEN DATE_ADD(NOW(), INTERVAL -90 DAY) AND NOW()
        ORDER BY acs.id
            ]]></body>
        </sql>
        <sql id="updateChangeFlag">
            <body><![CDATA[
        UPDATE crm_salerecord
           SET change_flag = ?
         WHERE id = ?
            ]]></body>
        </sql>
    </model>
    <model id="SaleAlloctRuleEntity">
        <sql id="insert">
            <body><![CDATA[
   REPLACE INTO acp.ACP_EMPLOYEE_ALLOT_RULE
                (company_id, store_id, member_rule, no_member_rule,  crs_member_rule,  crs_no_member_rule, auto_run, delete_flag, tenant_id)
         VALUES (:companyId, :storeId, :memberRule,  :noMemberRule, :crossMemberRule, :crossNoMemberRule,  :autoRun,           0, :companyId )
            ]]></body>
        </sql>
        <sql id="batchInsert">
            <body><![CDATA[
   REPLACE INTO acp.ACP_EMPLOYEE_ALLOT_RULE
                (company_id, store_id, member_rule, no_member_rule, crs_member_rule, crs_no_member_rule, auto_run, delete_flag, tenant_id)
         VALUES (?, ?, ?,  ?, ?, ?, ?, 0, ? )
            ]]></body>
        </sql>
        <sql id="deleteByCompany">
            <body><![CDATA[
   DELETE FROM acp.ACP_EMPLOYEE_ALLOT_RULE WHERE company_id = :companyId  AND store_id != 0
            ]]></body>
        </sql>
        <sql id="quer4List" dynamic="true">
            <body><![CDATA[
    SELECT id, company_id, store_id, member_rule, no_member_rule, crs_member_rule, crs_no_member_rule, auto_run, delete_flag, tenant_id, creator, createTime, editor, editTime
      FROM acp.ACP_EMPLOYEE_ALLOT_RULE
 <#if (sql=="loadAllByCompany")>
      WHERE company_id = :companyId
 <#else>
      WHERE company_id = -1
 </#if>
            ]]></body>
        </sql>
    </model>
    <model id="SaleRecord4EmployeeEntity">
        <sql id="quer4list" dynamic="true">
            <body><![CDATA[
    SELECT allot.sale_record_id AS 'id',GROUP_CONCAT(sub.id) AS 'subRecordIds',
           GROUP_CONCAT(CONCAT_WS('^^',sub.id,IFNULL(sub.goodsPrice,0.0)*sub.goodsCount,IFNULL(sub.salePrice,0.0)*sub.goodsCount,IFNULL(sub.goodsCount,0)) ORDER BY sub.id SEPARATOR '$') AS 'records',
           allot.member_id, allot.service_emp_id, allot.sales_emp01_id,allot.sales_emp02_id,allot.sales_emp03_id,
           allot.sales_emp04_id,allot.sales_emp05_id,allot.sales_emp06_id,allot.sales_emp07_id,allot.sales_emp08_id,
           allot.sales_emp09_id,allot.sales_emp10_id,allot.old_sale_record_id,
           allot.store_id AS 'saleStoreId', csm.store_id AS 'memberStoreId', allot.company_id, allot.createTime
      FROM acp.sales_employee_allot AS allot
 LEFT JOIN acp.crm_salesubrecord sub ON sub.saleRecord_id = allot.sale_record_id
 LEFT JOIN acp.crm_store_member csm ON allot.member_id = csm.member_id AND allot.member_id IS NOT NULL
 <#if (sql="findById")>
     WHERE allot.sale_record_id = :id
 <#elseif (sql=="findByStore")>
     WHERE allot.store_id = :storeId
       AND allot.company_id = :companyId
 <#elseif (sql=="findUndoByCompany")>
     WHERE allot.allot_status = 0
       AND allot.company_id = ${companyId}
 <#elseif (sql=="findByStoreWithPeriod")>
     WHERE allot.company_id = :companyId
       AND allot.store_id = :storeId
       AND allot.createTime BETWEEN '${startDate}' AND '${endDate}'
 </#if>
  GROUP BY allot.sale_record_id
  ORDER BY allot.sale_record_id
            ]]></body>
        </sql>
    </model>
    <model id="SaleAlloctResultEntity">
        <sql id="batchInsert">
            <body><![CDATA[
    INSERT INTO acp.ACP_EMPLOYEE_ALLOT_RESULT
                (company_id, store_id, sale_record_id, employee_id, employee_type, employee_count, order_type, member_id, error_tag, is_detail, allot_rule, card_amount, sale_amount, allot_msg, sale_date, delete_flag, tenant_id, goods_num,old_sale_record_Id)
         VALUES (         ?,        ?,              ?,           ?,              ?,              ?,          ?,        ?,         ?,         ?,          ?,           ?,           ?,         ?,          ?,          0,         ?,         ?,?)
            ]]></body>
        </sql>
    </model>
</sqls>