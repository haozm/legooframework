<?xml version="1.0" encoding="UTF-8"?>
<sqls>
    <macros>
        <macro id="send_rule_fields">
            <![CDATA[
             <#macro send_rule_fields>
                 sbr.id AS 'id',
                 sbr.business_type AS 'businessType',
                 (SELECT sct.field_name
                    FROM SMS_DICT_INFO sct
                   WHERE sct.dict_type = 'SMS_BUS_TYPE'
                     AND sct.field_value = sbr.business_type ) AS 'businessDesc',
                 sbr.sms_channel AS 'smsChannel',
                 sbr.free_send AS 'freeSend',
                 sbr.enbaled AS 'enabled',
	         </#macro>
	          ]]>
        </macro>
        <macro id="black_list_fields">
            <![CDATA[
	         <#macro black_list_fields>
                sb.id AS 'id',
                sb.company_id AS 'companyId',
                sb.store_id AS 'storeId',
                sb.is_effective AS 'effective',
                sb.is_disable AS 'disable',
	         </#macro>
	          ]]>
        </macro>
    </macros>
    <model id="SMSBlackListEntity">
        <sql id="loadAll" macros="black_list_fields,crud_fixed">
            <body><![CDATA[
          SELECT <@black_list_fields />
                 <@crud_fixed_select "sb" />
            FROM SMS_BLACKLIST AS sb
            ]]></body>
        </sql>
        <sql id="insert">
            <body><![CDATA[
    INSERT INTO SMS_BLACKLIST
                (id, company_id, is_effective, is_disable, store_id,  tenant_id, creator)
         VALUES (:id,:companyId, :effective,    :disable,  :storeId,  :tenantId, :creator)
            ]]></body>
        </sql>
        <sql id="batchInsert">
            <body><![CDATA[
   REPLACE INTO SMS_BLACKLIST
                (id, company_id, store_id,is_effective, is_disable,  tenant_id, creator )
         VALUES (?,           ?,         ?,          ?,         ?,         -1,       1 )
            ]]></body>
        </sql>
        <sql id="disabled">
            <body><![CDATA[
          UPDATE SMS_BLACKLIST
             SET is_disable = 1
           WHERE id = :id
             AND company_id = :companyId
            ]]></body>
        </sql>
        <sql id="uneffective">
            <body><![CDATA[
          UPDATE SMS_BLACKLIST
             SET is_effective = 0
           WHERE id = :id
             AND company_id = :companyId
            ]]></body>
        </sql>
        <sql id="effective">
            <body><![CDATA[
          UPDATE SMS_BLACKLIST
             SET is_effective = 1
           WHERE id = :id
             AND company_id = :companyId
            ]]></body>
        </sql>
        <sql id="delete">
            <body><![CDATA[
     DELETE FROM SMS_BLACKLIST
           WHERE id = :id
             AND company_id = :companyId
            ]]></body>
        </sql>
    </model>
    <model id="SMSSendRuleEntity">
        <sql id="insert">
            <body><![CDATA[
          INSERT INTO SMS_SEND_RULE
                      (id,  business_type, sms_channel, free_send, tenant_id, creator, createTime)
               VALUES (:id,:businessType, :smsChannel, :freeSend,        -1,     -1, CURRENT_TIMESTAMP)
            ]]></body>
        </sql>
        <sql id="loadAllRules" macros="send_rule_fields,crud_fixed">
            <body><![CDATA[
          SELECT <@send_rule_fields />
                 <@crud_fixed_select "sbr"/>
            FROM SMS_SEND_RULE AS sbr
           WHERE sbr.delete_flag =  0
             AND sbr.enbaled = :enabled
            ]]></body>
        </sql>
        <sql id="disabled">
            <body><![CDATA[
          UPDATE SMS_SEND_RULE
             SET enbaled = 0
           WHERE id = :id
            ]]></body>
        </sql>
    </model>
    <macros>
        <macro id="recharge_rule_fields">
            <![CDATA[
             <#macro recharge_rule_fields>
                   srr.id AS 'id',
                   srr.unit_price AS 'unitPrice',
                   srr.amount_range AS 'amountRange',
                   srr.company_id AS 'companyId',
                   srr.expired_date AS 'expiredDate',
                   srr.remarks AS 'remarks',
                   srr.enbaled AS 'enabled',
                   srr.temporary AS 'temporary',
                   srr.delete_flag AS 'deleteFlag',
                   srr.tenant_id AS 'tenantId',
                   srr.creator AS 'creator',
                   srr.createTime AS 'createTime',
                   srr.editor AS 'editor',
                   srr.editTime AS 'editTime'
	         </#macro>
	          ]]>
        </macro>
    </macros>
    <model id="RechargeRuleEntity">
        <sql id="loadAllRule" macros="recharge_rule_fields">
            <body><![CDATA[
          SELECT <@recharge_rule_fields />
            FROM SMS_RECHARGE_RULES AS srr
           WHERE srr.delete_flag = 0
             AND srr.temporary = 0
            ]]></body>
        </sql>
        <sql id="findById" macros="recharge_rule_fields">
            <body><![CDATA[
          SELECT <@recharge_rule_fields />
            FROM SMS_RECHARGE_RULES AS srr
           WHERE srr.delete_flag = 0
             AND srr.id = :id
            ]]></body>
        </sql>
        <sql id="insert">
            <body><![CDATA[
          INSERT INTO SMS_RECHARGE_RULES
                      ( id, unit_price, amount_range, company_id,  remarks, expired_date, temporary, enbaled,
                        tenant_id, creator, createTime)
               VALUES (:id, :unitPrice, :amountRange, :companyId, :remarks, :expiredDate, :temporary,      1,
                        100000,    -1,      CURRENT_TIMESTAMP)
            ]]></body>
        </sql>
        <sql id="changeState">
            <body><![CDATA[
               UPDATE SMS_RECHARGE_RULES
                  SET enbaled = :enabled, editor=-1, editTime=CURRENT_TIMESTAMP
                WHERE id =:id
            ]]></body>
        </sql>
    </model>
    <macros>
        <macro id="recharge_detail_fields">
            <![CDATA[
             <#macro recharge_detail_fields>
                  srd.id AS 'id',
                  srd.company_id AS 'companyId',
                  srd.store_id AS 'storeId',
                  srd.store_ids AS 'storeIds',
                  srd.recharge_scope AS 'rechargeScope',
                  srd.recharge_type AS 'rechargeType',
                  srd.rule_id AS 'ruleId',
                  srd.recharge_amount AS 'amount',
                  srd.total_quantity AS 'totalQuantity',
                  srd.used_quantity AS 'usedQuantity',
                  srd.delete_flag AS 'deleteFlag',
	         </#macro>
	          ]]>
        </macro>
    </macros>
    <model id="RechargeDetailEntity">
        <sql id="findById" macros="recharge_detail_fields,crud_fixed">
            <body><![CDATA[
       SELECT <@recharge_detail_fields />
              <@crud_fixed_select "srd" />
         FROM SMS_RECHARGE_DETAIL srd
        WHERE id = :id
            ]]></body>
        </sql>
        <sql id="insert">
            <body><![CDATA[
          INSERT INTO SMS_RECHARGE_DETAIL
                      (id, company_id, store_id, store_ids, recharge_scope, recharge_type, rule_id,
                       recharge_amount, total_quantity,  tenant_id, creator)
               VALUES (:id,:companyId, :storeId, :storeIds, :rechargeScope, :rechargeType, :ruleId,
                       :amount,        :totalQuantity ,  :tenantId, :creator)
            ]]></body>
        </sql>
        <sql id="batchInsert">
            <body><![CDATA[
          INSERT INTO SMS_RECHARGE_DETAIL
                      (id, company_id, store_id, store_ids, recharge_scope, recharge_type, rule_id,
                       recharge_amount, total_quantity,  tenant_id, creator)
               VALUES (?,           ?,       ?,                ?,             ?,              ?,       ?,
                                      ?,              ? ,         ?,       ?)
            ]]></body>
        </sql>
        <sql id="batchInsertDeduction">
            <body><![CDATA[
         INSERT INTO SMS_RECHARGE_DEDUCTION_DETAIL
                     (id, recharge_id, deduction_id, record_id, finish_flag,creator, createTime)
              VALUES (?,            ?,           ?,         ?,           ?,      ?, CURRENT_TIMESTAMP)
            ]]></body>
        </sql>
        <sql id="loadUnDeductionRecharge" macros="recharge_detail_fields,crud_fixed">
            <body><![CDATA[
          SELECT <@recharge_detail_fields />
                 <@crud_fixed_select "srd" />
            FROM SMS_RECHARGE_DETAIL AS srd
           WHERE srd.recharge_type = 2
             AND srd.recharge_scope = :rechargeScope
             AND srd.company_id = :companyId
           <#if (rechargeScope == 2)>
             AND srd.store_ids = :storeIds
           <#elseif (rechargeScope == 3)>
             AND srd.store_id = :storeId
           </#if>
             AND srd.id NOT IN ( SELECT ded.deduction_id
                                   FROM SMS_RECHARGE_DEDUCTION_DETAIL AS ded
                                  WHERE ded.finish_flag = 1)
            ]]></body>
        </sql>
        <sql id="batchBillByStore">
            <body><![CDATA[
               UPDATE SMS_RECHARGE_DETAIL
                  SET used_quantity = ? , editTime=CURRENT_TIMESTAMP
                WHERE id = ?
            ]]></body>
        </sql>
    </model>
    <macros>
        <macro id="sms_balance_fields">
            <![CDATA[
             <#macro sms_balance_fields>
                 smb.id AS 'id',
                 smb.company_id AS 'companyId',
                 smb.store_id AS 'storeId',
                 smb.store_ids AS 'storeIds',
                 smb.sms_balance AS 'balance',
                 smb.group_name AS 'groupName',
                 smb.recharge_scope AS 'rechargeScope',
	         </#macro>
	          ]]>
        </macro>
    </macros>
    <model id="RechargeBalanceEntity">
        <sql id="loadAllByCompany" macros="sms_balance_fields,crud_fixed">
            <body><![CDATA[
          SELECT <@sms_balance_fields />
                 <@crud_fixed_select "smb"/>
            FROM SMS_RECHARGE_BALANCE AS smb
           WHERE smb.company_id = :companyId
             AND smb.delete_flag = 0
            ]]></body>
        </sql>
        <sql id="findAllStoreGroupBalance" macros="sms_balance_fields,crud_fixed">
            <body><![CDATA[
          SELECT <@sms_balance_fields />
                 <@crud_fixed_select "smb"/>
            FROM SMS_RECHARGE_BALANCE AS smb
           WHERE smb.company_id = :companyId
             AND smb.recharge_scope = :rechargeScope
             AND smb.delete_flag = 0
            ]]></body>
        </sql>
        <sql id="loadByIds" macros="sms_balance_fields,crud_fixed">
            <body><![CDATA[
          SELECT <@sms_balance_fields />
                 <@crud_fixed_select "smb"/>
            FROM SMS_RECHARGE_BALANCE AS smb
           WHERE smb.id IN (<#list balanceIds as id>'${id}'<#sep>,</#list>)
             AND smb.delete_flag = 0
            ]]></body>
        </sql>
        <sql id="findByInstance" dynamic="true" macros="sms_balance_fields,crud_fixed">
            <body><![CDATA[
          SELECT <@sms_balance_fields />
                 <@crud_fixed_select "smb"/>
            FROM SMS_RECHARGE_BALANCE AS smb
           WHERE smb.company_id = :companyId
             AND smb.recharge_scope = :rechargeScope
             AND smb.store_id = :storeId
   <#if storeIds??> AND smb.store_ids = :storeIds </#if>
             AND smb.delete_flag = 0
            ]]></body>
        </sql>
        <sql id="update">
            <body><![CDATA[
          UPDATE SMS_RECHARGE_BALANCE
             SET sms_balance = :balance, editTime=CURRENT_TIMESTAMP
           WHERE id = :id
            ]]></body>
        </sql>
        <sql id="insert">
            <body><![CDATA[
  INSERT INTO SMS_RECHARGE_BALANCE
              ( id, company_id, store_id, store_ids, recharge_scope, group_name, sms_balance,  tenant_id )
       VALUES (:id, :companyId, :storeId, :storeIds, :rechargeScope, :groupName,    :balance,  :tenantId )
            ]]></body>
        </sql>
    </model>
    <model id="DeductionDetailEntity">
        <sql id="batchInsert">
            <body><![CDATA[
          INSERT INTO SMS_CHARGE_DETAIL
                      (id, company_id, store_id, sms_batchno, blance_id, blance_num, deduction_num, tenant_id)
               VALUES ( ?,          ?,        ?,           ?,         ?,          ?,             ?,         ?)
            ]]></body>
        </sql>
        <sql id="batchWriteOff">
            <body><![CDATA[
          UPDATE SMS_CHARGE_DETAIL
             SET reimburse_num = ?
           WHERE id = ?
            ]]></body>
        </sql>
        <sql id="loadBySmsBatchNos" macros="crud_fixed">
            <body><![CDATA[
        SELECT scd.id AS 'id',
               scd.company_id AS 'companyId',
               scd.store_id AS 'storeId',
               scd.sms_batchno AS 'smsBatchNo',
               scd.blance_id AS 'blanceId',
               scd.blance_num AS 'balanceNum',
               scd.deduction_num AS 'deductionNum',
               scd.reimburse_num AS 'reimburseNum',
               smb.recharge_scope AS 'rechargeScope',
               <@crud_fixed_select "scd" />
          FROM SMS_CHARGE_DETAIL AS scd
     LEFT JOIN SMS_RECHARGE_BALANCE AS smb ON scd.blance_id = smb.id
         WHERE scd.sms_batchno IN (<#list smsBatchNos as batchNo>'${batchNo}'<#sep>,</#list>)
      ORDER BY scd.sms_batchno DESC
            ]]></body>
        </sql>
    </model>
    <model id="SendMsg4FinalEntity">
        <sql id="load4Final">
            <body><![CDATA[
          SELECT stl.id AS 'id',
                 stl.send_status AS 'sendStatus',
                 stl.final_state AS 'finalState',
                 stl.final_state_date AS 'finalStateDate',
                 stl.final_state_desc AS 'finalStateDesc'
            FROM SMS_TRANSPORT_LOG AS stl
           WHERE stl.send_status = 3
             AND stl.final_state = 0
        ORDER BY stl.createTime
           LIMIT :limit
            ]]></body>
        </sql>
    </model>
    <model id="SendMsg4ReimburseEntity">
        <sql id="updateReimburseState" dynamic="true">
            <body><![CDATA[
          UPDATE SMS_TRANSPORT_LOG
             SET reimburse_state = 1, reimburse_batchno = :batchNo, reimburse_date = NOW()
           WHERE id IN (${ids?join(",")})
            ]]></body>
        </sql>
    </model>
    <model id="WechatMessageEntity">
        <sql id="loadMsg4Send">
            <body><![CDATA[
      SELECT stl.id, stl.company_id, stl.store_id, stl.member_id, stl.weixin_id,
             stl.device_id,stl.sms_context, stl.businsess_type, stl.send_batchno
        FROM SMS_TRANSPORT_LOG stl
   LEFT JOIN SMS_TRANSPORT_BATCH stb ON stl.send_batchno = stb.send_batchno
       WHERE stl.delete_flag = 0
         AND stl.send_channel = 2
         AND stl.sms_enabled = 1
         AND stl.send_status = 1
         AND stb.is_billing = 1
         AND stl.send_batchno = :batchNo
            ]]></body>
        </sql>
        <sql id="updateSendStatus" dynamic="true">
            <body><![CDATA[
      UPDATE SMS_TRANSPORT_LOG SET send_status = :sendStatus
       WHERE id IN (${msgIds?join(",")})
            ]]></body>
        </sql>
        <sql id="batchInsert">
            <body><![CDATA[
        INSERT INTO yycomm.Send_MSG_List
                    ( content,  touser, `type`, isgroup, todeviceid, store_id, company_id, UUID,fromuser, recieveTime ,sendFlag, IDGroup, IDSort)
             VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW(), 0, ?, ?)
            ]]></body>
        </sql>
    </model>
    <model id="SMSKeywordEntity">
        <sql id="findByAll" macros="crud_fixed">
            <body><![CDATA[
     SELECT skw.id AS 'id', skw.key_word AS 'keyword', skw.enabled AS 'enabled',
            <@crud_fixed_select "skw" />
       FROM SMS_KEY_WORDS AS skw
            ]]></body>
        </sql>
        <sql id="update">
            <body><![CDATA[
        UPDATE SMS_KEY_WORDS
           SET enabled = :enabled
         WHERE id = :id
            ]]></body>
        </sql>
        <sql id="insert">
            <body><![CDATA[
      INSERT INTO SMS_KEY_WORDS
                  (key_word, enabled, delete_flag, tenant_id, creator)
           VALUES (:keyword, :enabled, 0,           0,         0)
            ]]></body>
        </sql>
    </model>
    <model id="SendMsgStateEntity">
        <sql id="loadNeedSyncStateSmsIds">
            <body><![CDATA[
      SELECT rec.id
        FROM acp.SMS_TRANSPORT_LOG rec
       WHERE rec.send_status = 3
         AND rec.send_res_code = '0000'
         AND rec.final_state = 0
         AND TIMESTAMPDIFF(HOUR,rec.send_local_date,NOW()) <= 4
         AND TIMESTAMPDIFF(MINUTE,rec.send_local_date,NOW()) >= 10
            ]]></body>
        </sql>
        <sql id="loadSmsMsg4SendByBatchNo">
            <body><![CDATA[
      SELECT stl.id,stl.sms_count,stl.send_status,stl.send_remarks AS 'remarks'
        FROM SMS_TRANSPORT_LOG AS stl
       WHERE stl.send_status = 0
         AND stl.send_channel = 1
         AND stl.sms_enabled = 1
         AND stl.send_batchno = :batchNo
            ]]></body>
        </sql>
    </model>
    <model id="MsgTransportBatchEntity">
        <sql id="insert">
            <body><![CDATA[
    INSERT INTO SMS_TRANSPORT_BATCH
                (company_id, store_id, send_batchno, is_billing, sms_write_count, sms_write_ok_count, wx_write_count, wx_write_ok_count, delete_flag, tenant_id, creator, send_mode)
         VALUES (         ?,        ?,             ?,         ?,               ?,                  ?,              ?,                 ?,           0,         ?,      -1,         ?)
            ]]></body>
        </sql>
        <sql id="query4list" dynamic="true">
            <body><![CDATA[
    SELECT id, company_id, store_id, send_batchno, is_billing, send_mode, sms_write_count, sms_write_ok_count, wx_write_count, wx_write_ok_count, delete_flag, tenant_id, creator, createTime, editor, editTime
      FROM acp.SMS_TRANSPORT_BATCH
      <#if (sql=="loadByBatchNo")>
     WHERE send_batchno = :batchNo
      </#if>
            ]]></body>
        </sql>
    </model>
</sqls>
